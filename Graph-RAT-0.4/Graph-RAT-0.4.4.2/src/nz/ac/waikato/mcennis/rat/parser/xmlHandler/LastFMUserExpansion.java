/*
 * Created 18/05/2008-12:46:42
 * Copyright Daniel McEnnis, see license.txt
 */

package nz.ac.waikato.mcennis.rat.parser.xmlHandler;

import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URLEncoder;
import java.util.HashSet;
import nz.ac.waikato.mcennis.rat.crawler.Crawler;
import nz.ac.waikato.mcennis.rat.graph.Graph;
import nz.ac.waikato.mcennis.rat.parser.Parser;
import nz.ac.waikato.mcennis.rat.parser.ToFileParser;
import nz.ac.waikato.mcennis.rat.parser.XMLParser;

/**
 * Class for setting up a set of parsers for crawling LastFM or reading XML files
 * downloaded from LastFM.  Also is the object responsible for crawling all the files
 * associated with a LastFM username.
 * 
 * @author Daniel McEnnis
 */
public class LastFMUserExpansion {
    
    String[] profileParsers  = null;
    String[] topArtistParsers = null;
    String[] topTagsParsers = null;
    String[] friendsParsers = null;
    String[] similarParsers = null;
    
    static HashSet<String> seenUsernames = new HashSet<String>();
    
    /**
     * Prevent the given username from being exapnded
     * @param userName name to not parse
     */
    static public void blockUsername(String userName){
        seenUsernames.add(userName);
    }
    
    /**
     * Create the set of parsers for a crawler to parse.  If the toFileDirectory is set,
     * it saves copies of all files in that directory, otherwise no saving of files is performed.
     * The graph is set as the graph associated with each of the given objects.
     * @param toFileDirectory location to store files or null if no files are to be stored
     * @param graph graph to be used for holding the data generated by the parsers
     * @return array of parsers for loading into a crawler
     */
    public Parser[] setUpParsers(File toFileDirectory, Graph graph){
        if(toFileDirectory != null){
            String[] parserNames = {"LastFMProfile","LastFMUserTopArtists","LastFMUserArtistTags",
            "LastFMUserTags","LastFMArtistTag","LastFMFriends","LastFMSimilarUsers","ToFileParser"};
            return setUpParsers(toFileDirectory,graph,parserNames);
        }else{
            String[] parserNames = {"LastFMProfile","LastFMUserTopArtists","LastFMUserArtistTags",
            "LastFMUserTags","LastFMArtistTag","LastFMFriends","LastFMSimilarUsers"};
            return setUpParsers(toFileDirectory,graph,parserNames);
        }
    }
    
    /**
     * Create the set of parsers for a crawler to parse.  If the toFileDirectory is set,
     * it saves copies of all files in that directory, otherwise no saving of files is performed.
     * The graph is set as the graph associated with each of the given objects.  The parser names are 
     * derived from the arrayof parser names.  This throws an OutOfBounds exception if 
     * the number of names does not match the number of parsers created.
     * @param toFileDirectory location to store files or null if no files are to be stored
     * @param graph graph to be used for holding the data generated by the parsers
     * @param parserNames names to use for each of the parsers.
     * @return array of parsers for loading into a crawler
     */
    public Parser[] setUpParsers(File toFileDirectory,Graph graph, String[] parserNames){
        if((toFileDirectory != null)&&(parserNames != null)&&(parserNames.length==8)){
            Parser[] ret = new Parser[parserNames.length];
            ToFileParser file = new ToFileParser(toFileDirectory.getAbsolutePath());
            file.set(graph);
            ret[7] = file;
            ret[7].setName(parserNames[7]);
            
            XMLParser step = new XMLParser();
            LastFMProfile profile = new LastFMProfile();
            profile.setParser(file);
            profile.set(graph);
            step.setHandler(profile);
            ret[0] = step;
            ret[0].setName(parserNames[0]);
            profileParsers = new String[]{parserNames[0],parserNames[7]};
            
            step = new XMLParser();
            LastFMUserTopArtists topArtists = new LastFMUserTopArtists();
            topArtists.setParser(file);
            topArtists.setArtistParsers(new String[]{parserNames[4],parserNames[7]});
            topArtists.setUserArtistTagParsers(new String[]{parserNames[2],parserNames[7]});
            topArtists.set(graph);
            step.setHandler(topArtists);
            ret[1] = step;
            ret[1].setName(parserNames[1]);
            topArtistParsers = new String[]{parserNames[1],parserNames[7]};
            
            step = new XMLParser();
            LastFMUserArtistTags userArtist = new LastFMUserArtistTags();
            userArtist.setParser(file);
            userArtist.set(graph);
            step.setHandler(userArtist);
            ret[2] = step;
            ret[2].setName(parserNames[2]);
            
            step = new XMLParser();
            LastFMUserTags userTags = new LastFMUserTags();
            userTags.setParser(file);
            userTags.set(graph);
            step.setHandler(userTags);
            ret[3] = step;
            ret[3].setName(parserNames[3]);
            topTagsParsers = new String[]{parserNames[3],parserNames[7]};
                    
            step = new XMLParser();
            LastFMArtistTag artistTag = new LastFMArtistTag();
            artistTag.setParser(file);
            artistTag.set(graph);
            step.setHandler(artistTag);
            ret[4] = step;
            ret[4].setName(parserNames[4]);
            
            step = new XMLParser();
            LastFMFriends friends = new LastFMFriends();
            friends.setParser(file);
            friends.setExpansion(this);
            friends.set(graph);
            step.setHandler(friends);
            ret[5] = step;
            ret[5].setName(parserNames[5]);
            friendsParsers = new String[]{parserNames[5],parserNames[7]};
            
            step = new XMLParser();
            LastFMSimilarUsers similar = new LastFMSimilarUsers();
            similar.setParser(file);
            similar.setExpansion(this);
            similar.set(graph);
            step.setHandler(similar);
            ret[6] = step;
            ret[6].setName(parserNames[6]);
            similarParsers = new String[]{parserNames[6],parserNames[7]};
            
            return ret;
        }else if((toFileDirectory == null)&&(parserNames != null)&&(parserNames.length==7)){
            Parser[] ret = new Parser[parserNames.length];
            XMLParser step = new XMLParser();
            LastFMProfile profile = new LastFMProfile();
            profile.set(graph);
            step.setHandler(profile);
            ret[0] = step;
            ret[0].setName(parserNames[0]);
            profileParsers = new String[]{parserNames[0]};
            
            step = new XMLParser();
            LastFMUserTopArtists topArtists = new LastFMUserTopArtists();
            topArtists.setArtistParsers(new String[]{parserNames[4]});
            topArtists.setUserArtistTagParsers(new String[]{parserNames[2]});
            topArtists.set(graph);
            step.setHandler(topArtists);
            ret[1] = step;
            ret[1].setName(parserNames[1]);
            topArtistParsers = new String[]{parserNames[1]};
            
            step = new XMLParser();
            LastFMUserArtistTags userArtist = new LastFMUserArtistTags();
            userArtist.set(graph);
            step.setHandler(userArtist);
            ret[2] = step;
            ret[2].setName(parserNames[2]);
            
            step = new XMLParser();
            LastFMUserTags userTags = new LastFMUserTags();
            userTags.set(graph);
            step.setHandler(userTags);
            ret[3] = step;
            ret[3].setName(parserNames[3]);
            topTagsParsers = new String[]{parserNames[3]};
                    
            step = new XMLParser();
            LastFMArtistTag artistTag = new LastFMArtistTag();
            artistTag.set(graph);
            step.setHandler(artistTag);
            ret[4] = step;
            ret[4].setName(parserNames[4]);
            
            step = new XMLParser();
            LastFMFriends friends = new LastFMFriends();
            friends.setExpansion(this);
            friends.set(graph);
            step.setHandler(friends);
            ret[5] = step;
            ret[5].setName(parserNames[5]);
            friendsParsers = new String[]{parserNames[5]};
            
            step = new XMLParser();
            LastFMSimilarUsers similar = new LastFMSimilarUsers();
            similar.setExpansion(this);
            similar.set(graph);
            step.setHandler(similar);
            ret[6] = step;
            ret[6].setName(parserNames[6]);
            similarParsers = new String[]{parserNames[6]};
            
            return ret;
        }else{
            //TODO: throw exception
            return null;
        }
    }
    
    /**
     * Takes the given username and schedules the parsing of LastFM using this 
     * information if this username has not already been scheduled for download
     * or blocked.
     * @param crawler crawler for parsing LastFM
     * @param username user whose LastFM data is to be downloaded
     * @throws java.net.MalformedURLException
     * @throws java.io.IOException
     */
    public void expandUser(Crawler crawler, String username) throws MalformedURLException, IOException{
        if(!seenUsernames.contains(username)){
            seenUsernames.add(username);
            String URLBase = "http://ws.audioscrobbler.com/1.0/user/"+URLEncoder.encode(username, "UTF-8")+"/";
            crawler.crawl(URLBase+"profile.xml", profileParsers);
            crawler.crawl(URLBase+"topartists.xml",topArtistParsers);
            crawler.crawl(URLBase+"tags.xml",topTagsParsers);
            crawler.crawl(URLBase+"friends.xml", friendsParsers);
            crawler.crawl(URLBase+"neighbours.xml", similarParsers);
        }
    }        
    
}
