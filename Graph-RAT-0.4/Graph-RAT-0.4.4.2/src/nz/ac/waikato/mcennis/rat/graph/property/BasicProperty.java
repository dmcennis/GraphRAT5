/* * BasicProperty.java * * Created on 1 May 2007, 16:27 * * copyright Daniel McEnnis - published under Aferro GPL (see license.txt)*/package org.dynamicfactory.property;import nz.ac.waikato.mcennis.rat.graph.model.ModelShell;/** * *  * Class describing properties on graphs and actors * @author Daniel McEnnis */public class BasicProperty extends ModelShell implements Property{    static final long serialVersionUID = 2;        java.util.Vector values;    Class objectType;    String type;        /** Creates a new instance of BasicProperty      * @param name id for this property     */    public BasicProperty(String name, Class type) {        values = new java.util.Vector();        this.type = name;        objectType = type;    }    @Override    public Object[] getValue() {        return values.toArray();    }    @Override    public String getType() {        return type;    }    @Override    public void add(Object value) {        if(objectType.isInstance(value)){            values.add(value);            this.fireChange(Property.ADD_VALUE,0);        }    }    @Override    public int compareTo(Object o) throws ClassCastException{        Property right = (Property)o;        if(this.getType().contentEquals(right.getType())){            Object[] leftValue = this.getValue();            Object[] rightValue = right.getValue();            if(leftValue.length != rightValue.length){                return leftValue.length - rightValue.length;            }else{                if(leftValue.length == 0){                    return 0;                }else if(!(leftValue[0] instanceof Comparable)){                    return 0;                }else if(!(rightValue[0] instanceof Comparable)){                    return 0;                }                java.util.Arrays.sort(leftValue);                java.util.Arrays.sort(rightValue);                for(int i=0;i<leftValue.length;++i){                    if(!(((Comparable)leftValue[i]).compareTo(rightValue[i])!=0)){                        return ((Comparable)leftValue[i]).compareTo(rightValue[i]);                    }                }                return 0;            }        }else{            return this.getType().compareTo(right.getType());        }    }        public boolean equals(Object obj) {        if(obj instanceof Property){            if(this.compareTo(obj)==0){                return true;            }else{                return false;            }        }else{            return false;        }    }        @Override    public Property duplicate(){        BasicProperty props = new BasicProperty(type,objectType);        for(int i=0;i<values.size();++i){            props.add(values.get(i));        }        return props;    }    public Class getPropertyClass() {        return objectType;    }    }