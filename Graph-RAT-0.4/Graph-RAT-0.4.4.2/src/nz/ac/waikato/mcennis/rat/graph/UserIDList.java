/* * UserIDList.java * * Created on 20 August 2007, 14:50 * * Copyright Daniel McEnnis, published under Aferro GPL (see license.txt) */package nz.ac.waikato.mcennis.rat.graph;import java.util.Iterator;import java.util.Properties;import java.util.Set;import java.util.regex.Pattern;import nz.ac.waikato.mcennis.rat.graph.actor.Actor;import nz.ac.waikato.mcennis.rat.graph.actor.ActorFactory;import nz.ac.waikato.mcennis.rat.graph.link.Link;import org.dynamicfactory.model.ModelShell;import nz.ac.waikato.mcennis.rat.graph.path.PathSet;org.dynamicfactory.propertyQuery.Query;/** * Class that records only those users that initiate links.  All other forms of adding * a user are disabled.  All other apsects of the graph are no-ops.  Used to create a  * subset of all seen users that are represented by a FOAF page (i.e. have been crawled). * * @author Daniel McEnnis *  */public class UserIDList extends ModelShell implements Graph {    java.util.HashSet<String> usernames = new java.util.HashSet();    /** Creates a new instance of UserIDList */    public UserIDList() {        init(null);    }    @Override    public void add(Actor u) {    }    /**     * Instead of adding a link, adds the source actor to the list of 'good' actors     *      * @param link link (arc,edge) to be mined     */    public void add(Link link) {        usernames.add(link.getSource().getID());    }    @Override    public void remove(Actor u) {    }    @Override    public void remove(Link ul) {    }    /**     * Returns only actors that are present in the index of 'good' actors.     */    public Actor getActor(String type, String ID) {        if (usernames.contains(ID)) {            return ActorFactory.newInstance().create(new java.util.Properties());        } else {            return null;        }    }    @Override    public Actor[] getActor() {        return null;    }    @Override    public Actor[] getActor(String type) {        return null;    }    @Override    public Iterator<Actor> getActorIterator(String type) {        return null;    }    @Override    public String[] getActorTypes() {        return null;    }    @Override    public Link[] getLink() {        return null;    }    @Override    public Link[] getLink(String type) {        return null;    }    @Override    public Link[] getLinkBySource(String type, Actor sourceActor) {        return null;    }    @Override    public Link[] getLinkByDestination(String type, Actor destActor) {        return null;    }    @Override    public Link[] getLink(String type, Actor sourceActor, Actor destActor) {        return null;    }    @Override    public String[] getLinkTypes() {        return null;    }    @Override    public Graph[] getSubGraph(Query q) {        return null;    }    @Override    public void setSubGraph(Query q) {    }    @Override    public Property[] getProperty() {        return null;    }    @Override    public Property getProperty(String type) {        return null;    }    @Override    public void add(Property prop) {    }    @Override    public PathSet[] getPathSet() {        return null;    }    @Override    public PathSet getPathSet(String id) {        return null;    }    @Override    public void add(PathSet pathSet) {    }    @Override    public void setID(String id) {    }    @Override    public String getID() {        return "UserIDList";    }    @Override    public void commit() {    }    @Override    public void add(Graph g) {    }    @Override    public void close() {    }    @Override    public void anonymize() {    }    @Override    public Graph getParent() {        return null;    }    @Override    public Graph[] getChildren() {        return null;    }    @Override    public Graph getChildren(String id) {        return null;    }    @Override    public void addChild(Graph g) {    }    @Override    public Graph getSubGraph(Properties props, Set<Actor> actor) {        return null;    }    @Override    public Graph[] getGraphs(Pattern pattern) {        return new Graph[]{};    }    @Override    public Parameter[] getParameters() {        return new Parameter[]{};    }    @Override    public void init(Properties props) {        ;    }    @Override    public int getActorCount(String mode) {        return usernames.size();    }}