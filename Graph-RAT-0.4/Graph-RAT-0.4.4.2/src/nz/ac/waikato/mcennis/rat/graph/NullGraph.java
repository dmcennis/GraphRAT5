/* * NullGraph.java * * Created on 3 June 2007, 14:49 * * Copyright Daniel McEnnis, published under Aferro GPL (see license.txt) */package nz.ac.waikato.mcennis.rat.graph;import java.util.Iterator;import java.util.Properties;import java.util.Set;import java.util.regex.Pattern;import nz.ac.waikato.mcennis.rat.graph.link.Link;import nz.ac.waikato.mcennis.rat.graph.actor.Actor;import nz.ac.waikato.mcennis.rat.graph.model.ModelShell;import nz.ac.waikato.mcennis.rat.graph.path.PathSet;import nz.ac.waikato.mcennis.rat.graph.query.Query;/** * Class that retains no information and implements null operations on every node. * This is useful when one wishes to parse a document without creating the graph. * * @author Daniel McEnnis *  */public class NullGraph extends ModelShell implements Graph {    public static final long serialVersionUID = 1;    /** Creates a new instance of NullGraph */    public NullGraph() {        init(null);    }    @Override    public Actor[] getActor() {        return null;    }    @Override    public void add(Actor u) {    }    @Override    public Actor[] getActor(String type) {        return null;    }    @Override    public Actor getActor(String type, String ID) {        return null;    }    @Override    public void add(Link link) {    }    @Override    public Link[] getLink() {        return null;    }    @Override    public Link[] getLink(String type) {        return null;    }    @Override    public void remove(Actor u) {    }    @Override    public void remove(Link ul) {    }    @Override    public void add(Property prop) {    }    @Override    public Property[] getProperty() {        return null;    }    @Override    public Property getProperty(String type) {        return null;    }    @Override    public void setSubGraph(Query q) {    }    @Override    public Graph[] getSubGraph(Query q) {        return null;    }    @Override    public PathSet[] getPathSet() {        return null;    }    @Override    public PathSet getPathSet(String id) {        return null;    }    @Override    public void add(PathSet pathSet) {    }    @Override    public String[] getLinkTypes() {        return null;    }    @Override    public Link[] getLinkBySource(String type, Actor sourceActor) {        return null;    }    @Override    public Link[] getLinkByDestination(String type, Actor destActor) {        return null;    }    @Override    public Link[] getLink(String type, Actor sourceActor, Actor destActor) {        return null;    }    @Override    public String[] getActorTypes() {        return null;    }    @Override    public Iterator<Actor> getActorIterator(String type) {        return null;    }    @Override    public void setID(String id) {    }    @Override    public String getID() {        return "Null";    }    @Override    public void commit() {    }    @Override    public void add(Graph g) {    }    @Override    public void close() {    }    @Override    public void anonymize() {    }    @Override    public Graph getParent() {        return null;    }    @Override    public Graph[] getChildren() {        return null;    }    @Override    public Graph getChildren(String id) {        return null;    }    @Override    public void addChild(Graph g) {    }    @Override    public Graph getSubGraph(Properties props, Set<Actor> actor) {        return null;    }    @Override    public Graph[] getGraphs(Pattern pattern) {        return new Graph[]{};    }    @Override    public Parameter[] getParameters() {        return new Parameter[]{};    }        @Override    public void init(Properties props) {        ;    }    @Override    public int getActorCount(String mode) {        return 0;    }}