/* * AddMusicReferences.java * * Created on 12 June 2007, 14:44 * * Copyright Daniel McEnnis, published under Aferro GPL (see license.txt) */package nz.ac.waikato.mcennis.rat.graph.algorithm;import java.io.File;import java.util.Properties;import java.util.Set;import org.dynamicfactory.descriptors.DescriptorFactory;import org.dynamicfactory.descriptors.InputDescriptor;import org.dynamicfactory.descriptors.InputDescriptorInternal;import org.dynamicfactory.descriptors.OutputDescriptor;import org.dynamicfactory.descriptors.OutputDescriptorInternal;import org.dynamicfactory.descriptors.SettableParameter;import nz.ac.waikato.mcennis.rat.graph.artist.decider.ArtistDecider;import nz.ac.waikato.mcennis.rat.graph.artist.decider.ArtistDeciderFactory;import nz.ac.waikato.mcennis.rat.graph.link.LinkFactory;import nz.ac.waikato.mcennis.rat.graph.link.Link;import nz.ac.waikato.mcennis.rat.graph.Graph;import nz.ac.waikato.mcennis.rat.graph.actor.Actor;import nz.ac.waikato.mcennis.rat.graph.actor.ActorFactory;import nz.ac.waikato.mcennis.rat.graph.model.ModelShell;import nz.ac.waikato.mcennis.rat.scheduler.Scheduler;/** * Class that takes interest links, determines which are artists, then creates * an artist actor and links the user to this artist. * * @author Daniel McEnnis *  */public class AddMusicReferences extends ModelShell implements Algorithm {    public static final long serialVersionUID = 2;    private ArtistDecider decider = null;    ParameterInternal[] parameter = new ParameterInternal[8];    InputDescriptorInternal[] input = new InputDescriptorInternal[1];    OutputDescriptorInternal[] output = new OutputDescriptorInternal[2];    Properties artistDeciderProps;    /** Creates a new instance of AddMusicReferences */    public AddMusicReferences() {        init(null);    }    /**     * Sets the decider that this object uses.     * @param d chosen decider     */    public void setDecider(ArtistDecider d) {        decider = d;    }    /**     * Returns the decider that will be used to identify artists from non-artists.     *      * @return decider for this object     */    public ArtistDecider getDecider() {        return decider;    }    /**     * Takes interest links, determines which are artists, then creates     * an artist actor and links the user to this artist.     *      */    public void execute(Graph g) {        decider = ArtistDeciderFactory.newInstance().create(artistDeciderProps);        java.util.Iterator<Actor> user = g.getActorIterator((String) parameter[2].getValue());        fireChange(Scheduler.SET_ALGORITHM_COUNT, g.getActorCount((String) parameter[2].getValue()));        int actorCount = 0;        while (user.hasNext()) {            Actor a = user.next();            Property prop = a.getProperty((String) parameter[4].getValue());            if ((prop != null) && (prop.getPropertyClass().getName().contentEquals("java.lang.String"))) {                Object[] interests = prop.getValue();                for (int j = 0; j < interests.length; ++j) {                    if (decider.isArtist((String) interests[j])) {                        java.util.Properties props = new java.util.Properties();                        props.setProperty("ActorClass", (String) parameter[7].getValue());                        props.setProperty("ActorType", (String) parameter[3].getValue());                        props.setProperty("ActorID", (String) interests[j]);                        props.setProperty("LinkType", (String) parameter[1].getValue());                        props.setProperty("LinkClass", "Basic");                        Actor artist = g.getActor((String) parameter[3].getValue(), (String) interests[j]);                        if (artist == null) {                            artist = ActorFactory.newInstance().create(props);                            g.add(artist);                        }                        Link al = LinkFactory.newInstance().create(props);                        al.set(a, 1.0, artist);                        g.add(al);                    }                    fireChange(Scheduler.SET_ALGORITHM_PROGRESS, actorCount++);                }            }        }    }    @Override    public InputDescriptor[] getInputType() {        return input;    }    @Override    public OutputDescriptor[] getOutputType() {        return output;    }    @Override    public Parameter[] getParameter() {        return parameter;    }    @Override    public Parameter getParameter(String param) {        for (int i = 0; i < parameter.length; ++i) {            if (parameter[i].getName().contentEquals(param)) {                return parameter[i];            }        }        return null;    }    @Override    public SettableParameter[] getSettableParameter() {        return null;    }    @Override    public SettableParameter getSettableParameter(String param) {        return null;    }    /**     * Parameters for initialization of this object.     *      * <ol>     * <li>'name' - Name of this instance of the algorithm. Default is 'Music References'.     * <li>'relation' - type (relation) of the link to be created. Default is 'Given'.     * <li>'actorSourceType' - type (mode) of actor to pull interests from. Default     * is 'User'.     * <li>'actorDestinationType' - type (mode) of actor (artist) to create. Default     * is 'Artist'.     * <li>'propertyType' - name of the property on 'actorSourceType' that defines     * interests to be analyzed. Default is 'interest'.     * <li>'deciderType' - class of decider to create. Default is 'basic'.     * <li>'deciderLocation' - location of list of artists. Default is '/tmp/artist.txt'     * <li>'actorDestinationClass' - class of actor to create. Default is 'Basic'     * </ol>     * <br>     * <br>NOTE: properties are also fed to Decider Factory     * <br> @see nz.ac.waikato.mcennis.rat.graph.artist.decider.DeciderFactory     * <br>     * <br>Input 1 - Actor Property     * <br>Output 1 - Actor     * <br>Output 2 - Link     */    public void init(Properties map) {        Properties props = new Properties();        props.setProperty("Type", "java.lang.String");        props.setProperty("Name", "name");        props.setProperty("Class", "Basic");        props.setProperty("Structural", "true");        parameter[0] = DescriptorFactory.newInstance().createParameter(props);        if ((map != null) && (map.getProperty("name") != null)) {            parameter[0].setValue(map.getProperty("name"));        } else {            parameter[0].setValue("Music References");        }        // Parameter 1 - relation        props.setProperty("Type", "java.lang.String");        props.setProperty("Name", "relation");        props.setProperty("Class", "Basic");        props.setProperty("Structural", "true");        parameter[1] = DescriptorFactory.newInstance().createParameter(props);        if ((map != null) && (map.getProperty("relation") != null)) {            parameter[1].setValue(map.getProperty("relation"));        } else {            parameter[1].setValue("Given");        }        // Parameter 2 - actor source type        props.setProperty("Type", "java.lang.String");        props.setProperty("Name", "actorSourceType");        props.setProperty("Class", "Basic");        props.setProperty("Structural", "true");        parameter[2] = DescriptorFactory.newInstance().createParameter(props);        if ((map != null) && (map.getProperty("actorSourceType") != null)) {            parameter[2].setValue(map.getProperty("actorSourceType"));        } else {            parameter[2].setValue("User");        }        // Parameter 3 - actor destination type        props.setProperty("Type", "java.lang.String");        props.setProperty("Name", "actorDestinationType");        props.setProperty("Class", "Basic");        props.setProperty("Structural", "true");        parameter[3] = DescriptorFactory.newInstance().createParameter(props);        if ((map != null) && (map.getProperty("actorDestinationType") != null)) {            parameter[3].setValue(map.getProperty("actorDestinationType"));        } else {            parameter[3].setValue("Artist");        }        // Parameter 4 - property type        props.setProperty("Type", "java.lang.String");        props.setProperty("Name", "propertyType");        props.setProperty("Class", "Basic");        props.setProperty("Structural", "true");        parameter[4] = DescriptorFactory.newInstance().createParameter(props);        if ((map != null) && (map.getProperty("propertyType") != null)) {            parameter[4].setValue(map.getProperty("propertyType"));        } else {            parameter[4].setValue("interest");        }        // Parameter 5 - decider type        props.setProperty("Type", "java.lang.String");        props.setProperty("Name", "deciderType");        props.setProperty("Class", "Basic");        props.setProperty("Structural", "true");        parameter[5] = DescriptorFactory.newInstance().createParameter(props);        if ((map != null) && (map.getProperty("deciderType") != null)) {            parameter[5].setValue(map.getProperty("deciderType"));        } else {            parameter[5].setValue("basic");        }        // Parameter 5 - decider type        props.setProperty("Type", "java.io.File");        props.setProperty("Name", "artistListLocation");        props.setProperty("Class", "Basic");        props.setProperty("Structural", "true");        parameter[6] = DescriptorFactory.newInstance().createParameter(props);        if ((map != null) && (map.getProperty("artistListLocation") != null)) {            parameter[6].setValue(new File(map.getProperty("artistListLocation")));        } else {            parameter[6].setValue(new File("/tmp/artist.txt"));        }        // Parameter 6 - actor destination type        props.setProperty("Type", "java.lang.String");        props.setProperty("Name", "actorDestinationClass");        props.setProperty("Class", "Basic");        props.setProperty("Structural", "true");        parameter[7] = DescriptorFactory.newInstance().createParameter(props);        if ((map != null) && (map.getProperty("actorDestinationClass") != null)) {            parameter[7].setValue(map.getProperty("actorDestinationClass"));        } else {            parameter[7].setValue("Basic");        }        // create the decider        if (map != null) {//            System.out.println("Loading artists");            artistDeciderProps = new Properties();            artistDeciderProps.setProperty("ArtistDeciderType", (String) parameter[5].getValue());            Set<String> keys = map.stringPropertyNames();            for (String i : keys) {                artistDeciderProps.setProperty(i, map.getProperty(i));            }//            decider = ArtistDeciderFactory.newInstance().create(map);        }        // input 0        props.setProperty("Type", "ActorProperty");        props.setProperty("Relation", (String) parameter[2].getValue());        props.setProperty("AlgorithmName", (String) parameter[0].getValue());        props.setProperty("Property", (String) parameter[4].getValue());        input[0] = DescriptorFactory.newInstance().createInputDescriptor(props);        // output 0        props.setProperty("Type", "Actor");        props.setProperty("Relation", (String) parameter[3].getValue());        props.setProperty("AlgorithmName", (String) parameter[0].getValue());        props.remove("Property");        output[0] = DescriptorFactory.newInstance().createOutputDescriptor(props);        props.setProperty("Type", "Link");        props.setProperty("Relation", (String) parameter[1].getValue());        props.setProperty("AlgorithmName", (String) parameter[0].getValue());        props.remove("Property");        output[1] = DescriptorFactory.newInstance().createOutputDescriptor(props);    }}