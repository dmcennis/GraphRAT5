/* * AlgorithmFactory.java * * Created on 1 May 2007, 17:04 * * copyright Daniel McEnnis - published under Aferro GPL (see license.txt) */package nz.ac.waikato.mcennis.rat.graph.algorithm;import org.mcennis.graphrat.algorithm.similarity.SimilarityByLink;import org.mcennis.graphrat.algorithm.similarity.HierarchyByCooccurance;import org.mcennis.graphrat.algorithm.machinelearning.MultiInstanceSVM;import java.util.LinkedList;import org.mcennis.graphrat.prestige.ScalablePageRankPrestige;import org.mcennis.graphrat.prestige.ScalableHitsPrestige;import org.mcennis.graphrat.prestige.OptimizedCloseness;import org.mcennis.graphrat.prestige.OptimizedBetweeness;import org.mcennis.graphrat.algorithm.clustering.NaiveImplementClique;import org.mcennis.graphrat.prestige.HITSPrestige;import org.mcennis.graphrat.algorithm.clustering.EnumerateMaximalCliques;import org.mcennis.graphrat.prestige.AddPageRankPrestige;import org.mcennis.graphrat.prestige.AddDegreeCentrality;import org.mcennis.graphrat.prestige.AddClosenessCentrality;import org.mcennis.graphrat.prestige.AddCombinedCloseness;import org.mcennis.graphrat.prestige.AddBasicBetweenessCentrality;import org.mcennis.graphrat.prestige.AddBetweenessCentrality;import java.util.Properties;import org.mcennis.graphrat.algorithm.OutputBibliographyXML;import org.mcennis.graphrat.algorithm.OutputBridgesByCluster;import org.mcennis.graphrat.algorithm.OutputDifference;import org.mcennis.graphrat.algorithm.aggregators.AggregateByGraph;import org.mcennis.graphrat.algorithm.aggregators.AggregateByLinkProperty;import org.mcennis.graphrat.algorithm.aggregators.AggregateOnActor;import org.mcennis.graphrat.algorithm.aggregators.FromGraphToActor;import org.mcennis.graphrat.algorithm.clustering.BicomponentClusterer;import org.mcennis.graphrat.algorithm.clustering.FindStronglyConnectedComponents;import org.mcennis.graphrat.algorithm.clustering.FindWeaklyConnectedComponents;import org.mcennis.graphrat.algorithm.clustering.NormanGirvanEdgeBetweenessClustering;import org.mcennis.graphrat.algorithm.clustering.TraditionalEdgeBetweenessClustering;import org.mcennis.graphrat.algorithm.collaborativefiltering.AssociativeMining;import org.mcennis.graphrat.algorithm.collaborativefiltering.Item2Item;import org.mcennis.graphrat.algorithm.collaborativefiltering.User2User;import org.mcennis.graphrat.algorithm.evaluation.RecommendationError;import org.mcennis.graphrat.algorithm.evaluation.HalfLife;import org.mcennis.graphrat.algorithm.evaluation.KendallTau;import org.mcennis.graphrat.algorithm.evaluation.MeanErrorEvaluation;import org.mcennis.graphrat.algorithm.evaluation.PearsonCorrelation;import org.mcennis.graphrat.algorithm.evaluation.PrecisionRecallFMeasure;import org.mcennis.graphrat.algorithm.evaluation.ROCAreaEvaluation;import org.mcennis.graphrat.algorithm.machinelearning.SVM;import org.mcennis.graphrat.algorithm.similarity.GraphSimilarityByProperty;import org.mcennis.graphrat.algorithm.similarity.SimilarityByProperty;import org.mcennis.graphrat.algorithm.visual.BasicDisplayGraph;import org.mcennis.graphrat.algorithm.visual.ColoredByPropertyGraph;import org.mcennis.graphrat.algorithm.visual.DisplayAll;import org.mcennis.graphrat.algorithm.*;/** * Class for generating an algorithm object without explicitly linking which one. * * @author Daniel McEnnis *  */public class AlgorithmFactory {    static AlgorithmFactory instance = null;    /**     * Singleton method for aquiring this instance     * @return AlgorithmFactory instance.     */    public static AlgorithmFactory newInstance() {        if (instance == null) {            instance = new AlgorithmFactory();        }        return instance;    }    /** Creates a new instance of AlgorithmFactory */    public AlgorithmFactory() {    }    /**     * Creates an algorithm     * <br/>     * <br/>Algorithm is chosen via the 'algorithm' property.  Properties for each     * algorithm are described in the init method of each algorithm's JavaDoc.     * <br/>The algorithms provided are:     * <ul><li>'AddBasicBetweenessCentrality'</li>     * <li>'AddBasicGeodesicPaths'</li>     * <li>'AddBasicInterestLink'</li>     * <li>'AddClosenessCentrality'</li>     * <li>'AddDegreeCentrality'</li>     * <li>'AddDegreeProperties'</li>     * <li>'AddGeodesicProperties'</li>     * <li>'AddMusicLinks'</li>     * <li>'AddMusicRecommendations'</li>     * <li>'AddMusicReferences'</li>     * <li>'AddPageRankPrestige'</li>     * <li>'EnumerateMaximalCliques'</li>     * <li>'NaiveImplementClique'</li>     * <li>'Evaluation'</li>     * <li>'TrimEdgeUsers'</li>     * <li>'HITSPrestige'</li>     * <li>'ScalablePageRankPrestige'</li>     * <li>'ScalableHITSPrestige'</li>     * <li>'AddCombinedCloseness'</li>     * <li>'OptimizedCloseness'</li>     * <li>'OptimizedBetweeness'</li>     * <li>'ExtractMusicCoverage'</li>     * <li>'ExecuteWeka'</li>     * <li>'OutputPageRank'</li>     * <li>'RankingProperties'</li>     * <li>'Difference'</li>     * <li>'OutputDifference'</li>     * <li>'Identify Bridges'</li>     * <li>'Output Bridges By Cluster'</li>     * <li>'Basic Display Graph'</li>     * <li>'Colored By Property Graph'</li>     * <li>'Display All'</li>     * </ul>     *      * @param props mapof parameters for initialiing the algorithm     * @return newly constructed algorithm     */    public Algorithm create(Properties props) {        Algorithm ret = null;        if ((props != null) && (props.getProperty("algorithm") != null)) {            if (props.getProperty("algorithm").compareToIgnoreCase("AddBasicBetweenessCentrality") == 0) {                ret = new AddBasicBetweenessCentrality();                ret.init(props);            } else if (props.getProperty("algorithm").compareToIgnoreCase("AddBetweenessCentrality") == 0) {                ret = new AddBetweenessCentrality();                ret.init(props);            } else if (props.getProperty("algorithm").compareToIgnoreCase("AddBasicGeodesicPaths") == 0) {                ret = new AddBasicGeodesicPaths();                ret.init(props);            } else if (props.getProperty("algorithm").compareToIgnoreCase("AddBasicInterestLink") == 0) {                ret = new AddBasicInterestLink();                ret.init(props);            } else if (props.getProperty("algorithm").compareToIgnoreCase("AddClosenessCentrality") == 0) {                ret = new AddClosenessCentrality();                ret.init(props);            } else if (props.getProperty("algorithm").compareToIgnoreCase("AddDegreeCentrality") == 0) {                ret = new AddDegreeCentrality();                ret.init(props);            } else if (props.getProperty("algorithm").compareToIgnoreCase("AddDegreeGraphProperties") == 0) {                ret = new AddDegreeGraphProperties();                ret.init(props);            } else if (props.getProperty("algorithm").compareToIgnoreCase("AddGeodesicProperties") == 0) {                ret = new AddGeodesicProperties();                ret.init(props);            } else if (props.getProperty("algorithm").compareToIgnoreCase("AddMusicLinks") == 0) {                ret = new AddMusicLinks();                ret.init(props);            } else if (props.getProperty("algorithm").compareToIgnoreCase("AddMusicRecommendations") == 0) {                ret = new AddMusicRecommendations();                ret.init(props);            } else if (props.getProperty("algorithm").compareToIgnoreCase("AddMusicReferences") == 0) {                ret = new AddMusicReferences();                ret.init(props);            } else if (props.getProperty("algorithm").compareToIgnoreCase("AddPageRankPrestige") == 0) {                ret = new AddPageRankPrestige();                ret.init(props);            } else if (props.getProperty("algorithm").compareToIgnoreCase("EnumerateMaximalCliques") == 0) {                ret = new EnumerateMaximalCliques();                ret.init(props);            } else if (props.getProperty("algorithm").compareToIgnoreCase("NaiveImplementClique") == 0) {                ret = new NaiveImplementClique();                ret.init(props);            } else if (props.getProperty("algorithm").compareToIgnoreCase("TrimEdgeUsers") == 0) {                ret = new TrimEdgeUsers();                ret.init(props);            } else if (props.getProperty("algorithm").compareToIgnoreCase("HITSPrestige") == 0) {                ret = new HITSPrestige();                ret.init(props);            } else if (props.getProperty("algorithm").compareToIgnoreCase("ScalablePageRankPrestige") == 0) {                ret = new ScalablePageRankPrestige();                ret.init(props);            } else if (props.getProperty("algorithm").compareToIgnoreCase("ScalableHITSPrestige") == 0) {                ret = new ScalableHitsPrestige();                ret.init(props);            } else if (props.getProperty("algorithm").compareToIgnoreCase("AddCombinedCloseness") == 0) {                ret = new AddCombinedCloseness();                ret.init(props);            } else if (props.getProperty("algorithm").compareToIgnoreCase("OptimizedCloseness") == 0) {                ret = new OptimizedCloseness();                ret.init(props);            } else if (props.getProperty("algorithm").compareToIgnoreCase("OptimizedBetweeness") == 0) {                ret = new OptimizedBetweeness();                ret.init(props);            } else if (props.getProperty("algorithm").compareToIgnoreCase("ExtractMusicCoverage") == 0) {                ret = new ExtractMusicCoverage();                ret.init(props);            } else if (props.getProperty("algorithm").compareToIgnoreCase("MI Weka") == 0) {                ret = new MultiInstanceSVM();                ret.init(props);            } else if (props.getProperty("algorithm").compareToIgnoreCase("Weka") == 0) {                ret = new SVM();                ret.init(props);            } else if (props.getProperty("algorithm").compareToIgnoreCase("OutputPageRank") == 0) {                ret = new OutputBibliographyXML();                ret.init(props);            } else if (props.getProperty("algorithm").compareToIgnoreCase("RankingProperties") == 0) {                ret = new RankingProperties();                ret.init(props);            } else if (props.getProperty("algorithm").compareToIgnoreCase("Difference") == 0) {                ret = new Difference();                ret.init(props);            } else if (props.getProperty("algorithm").compareToIgnoreCase("OutputDifference") == 0) {                ret = new OutputDifference();                ret.init(props);            } else if (props.getProperty("algorithm").compareToIgnoreCase("Identify Bridges") == 0) {                ret = new IdentifyBridges();                ret.init(props);            } else if (props.getProperty("algorithm").compareToIgnoreCase("Output Bridges By Cluster") == 0) {                ret = new OutputBridgesByCluster();                ret.init(props);            } else if (props.getProperty("algorithm").compareToIgnoreCase("Basic Display Graph") == 0) {                ret = new BasicDisplayGraph();                ret.init(props);            } else if (props.getProperty("algorithm").compareToIgnoreCase("Colored By Property Graph") == 0) {                ret = new ColoredByPropertyGraph();                ret.init(props);            } else if (props.getProperty("algorithm").compareToIgnoreCase("Display All") == 0) {                ret = new DisplayAll();                ret.init(props);            } else if (props.getProperty("algorithm").compareToIgnoreCase("Bicomponent Clusterer") == 0) {                ret = new BicomponentClusterer();                ret.init(props);            } else if (props.getProperty("algorithm").compareToIgnoreCase("Find Strongly Connected Components") == 0) {                ret = new FindStronglyConnectedComponents();                ret.init(props);            } else if (props.getProperty("algorithm").compareToIgnoreCase("Find Weakly Connected Components") == 0) {                ret = new FindWeaklyConnectedComponents();                ret.init(props);            } else if (props.getProperty("algorithm").compareToIgnoreCase("Traditional Edge Betweeness Clustering") == 0) {                ret = new TraditionalEdgeBetweenessClustering();                ret.init(props);            } else if (props.getProperty("algorithm").compareToIgnoreCase("Norman-Girvan Edge Betweeness Clustering") == 0) {                ret = new NormanGirvanEdgeBetweenessClustering();                ret.init(props);            } else if (props.getProperty("algorithm").compareToIgnoreCase("Associative Mining Collaborative Filtering") == 0) {                ret = new AssociativeMining();                ret.init(props);            } else if (props.getProperty("algorithm").compareToIgnoreCase("User to User Collaborative Filtering") == 0) {                ret = new User2User();                ret.init(props);            } else if (props.getProperty("algorithm").compareToIgnoreCase("Item to Item Collaborative Filtering") == 0) {                ret = new Item2Item();                ret.init(props);            } else if (props.getProperty("algorithm").compareToIgnoreCase("Ad Hoc Classification") == 0) {                ret = new RecommendationError();                ret.init(props);            } else if (props.getProperty("algorithm").compareToIgnoreCase("Half Life") == 0) {                ret = new HalfLife();                ret.init(props);            } else if (props.getProperty("algorithm").compareToIgnoreCase("Kendall Tau") == 0) {                ret = new KendallTau();                ret.init(props);            } else if (props.getProperty("algorithm").compareToIgnoreCase("Mean Error Evaluation") == 0) {                ret = new MeanErrorEvaluation();                ret.init(props);            } else if (props.getProperty("algorithm").compareToIgnoreCase("Pearson Correlation") == 0) {                ret = new PearsonCorrelation();                ret.init(props);            } else if (props.getProperty("algorithm").compareToIgnoreCase("Precision Recall FMeasure") == 0) {                ret = new PrecisionRecallFMeasure();                ret.init(props);            } else if (props.getProperty("algorithm").compareToIgnoreCase("ROC Area") == 0) {                ret = new ROCAreaEvaluation();                ret.init(props);            } else if (props.getProperty("algorithm").compareToIgnoreCase("Hierarchy By Cooccurance") == 0) {                ret = new HierarchyByCooccurance();                ret.init(props);            } else if (props.getProperty("algorithm").compareToIgnoreCase("Similarity By Link") == 0) {                ret = new SimilarityByLink();                ret.init(props);            } else if (props.getProperty("algorithm").compareToIgnoreCase("Similarity By Property") == 0) {                ret = new SimilarityByProperty();                ret.init(props);            } else if (props.getProperty("algorithm").compareToIgnoreCase("Graph Similarity By Property") == 0) {                ret = new GraphSimilarityByProperty();                ret.init(props);            } else if (props.getProperty("algorithm").compareToIgnoreCase("From Graph To Actor") == 0) {                ret = new FromGraphToActor();                ret.init(props);            } else if (props.getProperty("algorithm").compareToIgnoreCase("Aggregate On Actor") == 0) {                ret = new AggregateOnActor();                ret.init(props);            } else if (props.getProperty("algorithm").compareToIgnoreCase("Aggregate By Link") == 0) {                ret = new AggregateByLinkProperty();                ret.init(props);            } else if (props.getProperty("algorithm").compareToIgnoreCase("Aggregate By Graph") == 0) {                ret = new AggregateByGraph();                ret.init(props);            }        }        return ret;    }    public String[] getKnownOtherModules() {        LinkedList<String> knownModulesList = new LinkedList<String>();        knownModulesList.add("AddBasicGeodesicPaths");        knownModulesList.add("AddBasicInterestLink");        knownModulesList.add("AddDegreeGraphProperties");        knownModulesList.add("AddGeodesicProperties");        knownModulesList.add("AddMusicLinks");        knownModulesList.add("AddMusicRecommendations");        knownModulesList.add("AddMusicReferences");        knownModulesList.add("TrimEdgeUsers");        knownModulesList.add("RankingProperties");        knownModulesList.add("Difference");        knownModulesList.add("Identify Bridges");        java.util.Collections.sort(knownModulesList);        return knownModulesList.toArray(new String[]{});    }        public String[] getKnownSimilarityModules(){        LinkedList<String> knownModulesList = new LinkedList<String>();        knownModulesList.add("Hierarchy By Cooccurance");        knownModulesList.add("Similarity By Link");        knownModulesList.add("Similarity By Property");        knownModulesList.add("Graph Similarity By Property");        java.util.Collections.sort(knownModulesList);        return knownModulesList.toArray(new String[]{});    }        public String[] getKnownAggregatorModules(){        LinkedList<String> knownModulesList = new LinkedList<String>();        knownModulesList.add("Aggregate on Actor");        knownModulesList.add("Aggregate By Link");        knownModulesList.add("Aggregate By Graph");        knownModulesList.add("From Graph To Actor");        java.util.Collections.sort(knownModulesList);        return knownModulesList.toArray(new String[]{});   }    public String[] getKnownPrestigeModules() {        LinkedList<String> knownModulesList = new LinkedList<String>();        knownModulesList.add("AddBasicBetweenessCentrality");        knownModulesList.add("AddBetweenessCentrality");        knownModulesList.add("OptimizedBetweeness");        knownModulesList.add("OptimizedCloseness");        knownModulesList.add("AddCombinedCloseness");        knownModulesList.add("ScalableHITSPrestige");        knownModulesList.add("ScalablePageRankPrestige");        knownModulesList.add("HITSPrestige");        knownModulesList.add("AddPageRankPrestige");        knownModulesList.add("AddDegreeCentrality");        knownModulesList.add("AddClosenessCentrality");        knownModulesList.add("AddBetweenessCentrality");        knownModulesList.add("AddBasicBetweenessCentrality");        java.util.Collections.sort(knownModulesList);        return knownModulesList.toArray(new String[]{});    }    public String[] getKnownClusterModules() {        LinkedList<String> knownModulesList = new LinkedList<String>();        knownModulesList.add("NaiveImplementClique");        knownModulesList.add("EnumerateMaximalCliques");        knownModulesList.add("Bicomponent Clusterer");        knownModulesList.add("Find Strongly Connected Components");        knownModulesList.add("Find Weakly Connected Components");        knownModulesList.add("Traditional Edge Betweeness Clustering");        knownModulesList.add("Norman-Girvan Edge Betweeness Clustering");        java.util.Collections.sort(knownModulesList);        return knownModulesList.toArray(new String[]{});    }        public String[] getKnownCollaborativeFilteringModules(){        LinkedList<String> knownModulesList = new LinkedList<String>();        knownModulesList.add("Associative Mining Collaborative Filtering");        knownModulesList.add("User to User Collaborative Filtering");        knownModulesList.add("Item to Item Collaborative Filtering");        java.util.Collections.sort(knownModulesList);        return knownModulesList.toArray(new String[]{});    }    public String[] getKnownDisplayModules() {        LinkedList<String> knownModulesList = new LinkedList<String>();        knownModulesList.add("ExtractMusicCoverage");        knownModulesList.add("Basic Display Graph");        knownModulesList.add("Colored By Property Graph");        knownModulesList.add("Display All");        knownModulesList.add("Output Bridges By Cluster");        knownModulesList.add("OutputDifference");        knownModulesList.add("OutputPageRank");        java.util.Collections.sort(knownModulesList);        return knownModulesList.toArray(new String[]{});    }        public String[] getKnownMachineLearningModules(){        LinkedList<String> knownModulesList = new LinkedList<String>();        knownModulesList.add("MI Weka");        knownModulesList.add("Weka");        java.util.Collections.sort(knownModulesList);        return knownModulesList.toArray(new String[]{});    }        public String[] getKnownEvaluationModules(){        LinkedList<String> knownModulesList = new LinkedList<String>();        knownModulesList.add("Ad Hoc Classifciation");        knownModulesList.add("Half Life");        knownModulesList.add("Mean Error Evaluation");        knownModulesList.add("Kendall Tau");        knownModulesList.add("Precision Recall FMeasure");        knownModulesList.add("PearsonCorrelation");        java.util.Collections.sort(knownModulesList);        return knownModulesList.toArray(new String[]{});    }}