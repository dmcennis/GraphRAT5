/* * MemGraphReader.java * * Created on 11 June 2007, 11:47 * * Copyright Daniel McEnnis, published under Aferro GPL (see license.txt) */package nz.ac.waikato.mcennis.rat.parser.xmlHandler;import nz.ac.waikato.mcennis.rat.graph.Graph;import nz.ac.waikato.mcennis.rat.graph.actor.Actor;import nz.ac.waikato.mcennis.rat.graph.actor.ActorFactory;import nz.ac.waikato.mcennis.rat.graph.link.Link;import nz.ac.waikato.mcennis.rat.graph.link.LinkFactory;import nz.ac.waikato.mcennis.rat.graph.page.PageFactory;import nz.ac.waikato.mcennis.rat.parser.ParsedObject;import java.util.Stack;import java.util.logging.Level;import java.util.logging.Logger;import nz.ac.waikato.mcennis.rat.graph.MemGraph;import org.dynamicfactory.property.PropertyTypeRegister;import org.xml.sax.Attributes;import org.xml.sax.Locator;import org.xml.sax.SAXException;/** * * SAX XML parser that reads serialized MemGraph graphs. The DTD of the file created * is as follows: *  * <pre>  * &lt;!DOCTYPE dataObject [ *   &lt;!ELEMENT dataObject (graph)&gt; *   &lt;!ELEMENT graph (graphClass,graphName,graphProperties*,pathSet*,user*,userLink*,graph*)&gt; *   &lt;!ELEMENT graphClass (#PCDATA)&gt; *   &lt;!ELEMENT graphName (#PCDATA)&gt; *   &lt;!ELEMENT graphProperties (gClass,gValueClass,gType,gValue+)&gt; *   &lt;!ELEMENT gClass (#PCDATA)&gt; *   &lt;!ELEMENT gValueClass (#PCDATA)&gt; *   &lt;!ELEMENT gType (#PCDATA)&gt; *   &lt;!ELEMENT gValue (#PCDATA)&gt; *   &lt;!ELEMENT pathSet (path+)&gt; *   &lt;!ELEMENT path (actor+)&gt; *   &lt;!ELEMENT actor (actorType,actorID)&gt; *   &lt;!ELEMENT actorType (#PCDATA)&gt; *   &lt;!ELEMENT actorID (#PCDATA)&gt; *   &lt;!ELEMENT user (userClass,ID,properties*,page*)&gt; *   &lt;!ELEMENT ID (#PCDATA)&gt; *   &lt;!ELEMENT properties (propertiesClass,valueClass,type,value*)&gt; *   &lt;!ELEMENT type (#PCDATA)&gt; *   &lt;!ELEMENT value (#PCDATA)&gt; *   &lt;!ELEMENT valueClass (#PCDATA)&gt; *   &lt;!ELEMENT userLink (uClass,uStrength,uSourceType,uSourceID,uDestinationType,uDestinationID,uProperties)&gt; *   &lt;!ELEMENT uClass (#PCDATA)&gt; *   &lt;!ELEMENT uSourceType (#PCDATA)&gt; *   &lt;!ELEMENT uSourceID (#PCDATA)&gt; *   &lt;!ELEMENT uStrength (#PCDATA)&gt; *   &lt;!ELEMENT uDestinationType (#PCDATA)&gt; *   &lt;!ELEMENT uDestinationID (#PCDATA)&gt; *   &lt;!ELEMENT uProperties (uPropertiesClass,uValueClass,uPropertiesType,uPropertiesValue+)&gt; *   &lt;!ELEMENT uPropertiesClass (#PCDATA)&gt; *   &lt;!ELEMENT uPropertiesValueClass (#PCDATA)&gt; *   &lt;!ELEMENT uPropertiesType (#PCDATA)&gt; *   &lt;!ELEMENT uPropertiesValue (#PCDATA)&gt; *   &lt;!ELEMENT page (#PCDATA)&gt; * ]&gt; * </pre> *  * FIX: page should allow a type declaration * * @author Daniel McEnnis */public class GraphReader extends Handler {    Graph graph = null;    enum State {        START, DATAOBJECT, GRAPH, GRAPHNAME, GRAPHCLASS, GPROPERTIES, GVALUESCLASS, GCLASS, GTYPE, GVALUE,        USER, USERCLASS, ID, PROPERTIES, PROPERTIESCLASS, VALUESCLASS, TYPE, VALUE, USERLINK,        UCLASS, USTRENGTH, USOURCETYPE, USOURCEID, UDESTINATIONTYPE, UDESTINATIONID, UPROPERTIES,        UPROPERTIESCLASS, UPROPERTIESVALUECLASS, UPROPERTIESTYPE, UPROPERTIESVALUE,        PAGE, PATHSET, PATH, ACTOR, INNER_GRAPH    };    State state = State.START;    Actor a;    String artistType;    Actor u;    String userType;    Property prop;    String propType;    Link ul;    String linkType;    Actor sourceActor;    Actor destActor;    double strength;    Link al;    Link sa;    Locator locator;    Stack<Graph> nestedGraphs;    Graph masterGraph;    String valuesClass = "";    ;    StringBuffer characters = new StringBuffer();    int actorCount=0;    int linkCount=0;    /** Creates a new instance of MemGraphReader */    public GraphReader() {    }    @Override    public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {        try {            characters.setLength(0);//        System.out.println("Start: " + uri + " - " + localName + " - " + qName);            if (localName.equalsIgnoreCase("dataObject") || qName.equalsIgnoreCase("dataObject")) {                state = State.DATAOBJECT;            } else if (localName.equalsIgnoreCase("graph") || qName.equalsIgnoreCase("graph")) {                if (state == State.DATAOBJECT) {                    state = State.GRAPH;                } else {                    state = State.INNER_GRAPH;                    nestedGraphs.push(graph);                    graph = new MemGraph();                }            } else if (localName.equalsIgnoreCase("graphClass") || qName.equalsIgnoreCase("graphClass")) {                state = State.GRAPHCLASS;            } else if (localName.equalsIgnoreCase("graphName") || qName.equalsIgnoreCase("graphName")) {                state = State.GRAPHNAME;            } else if (localName.equalsIgnoreCase("gProperties") || qName.equalsIgnoreCase("gProperties")) {                state = State.GPROPERTIES;            } else if (localName.equalsIgnoreCase("gClass") || qName.equalsIgnoreCase("gClass")) {                state = State.GCLASS;            } else if (localName.equalsIgnoreCase("gType") || qName.equalsIgnoreCase("gType")) {                state = State.GTYPE;            } else if (localName.equalsIgnoreCase("gValueClass") || qName.equalsIgnoreCase("gValueClass")) {                state = State.GVALUESCLASS;            } else if (localName.equalsIgnoreCase("gValue") || qName.equalsIgnoreCase("gValue")) {                state = State.GVALUE;            } else if (localName.equalsIgnoreCase("user") || qName.equalsIgnoreCase("user")) {                state = State.USER;            } else if (localName.equalsIgnoreCase("userClass") || qName.equalsIgnoreCase("userClass")) {                state = State.USERCLASS;            } else if (localName.equalsIgnoreCase("id") || qName.equalsIgnoreCase("id")) {                state = State.ID;            } else if (localName.equalsIgnoreCase("properties") || qName.equalsIgnoreCase("properties")) {                state = State.PROPERTIES;            } else if (localName.equalsIgnoreCase("propertiesClass") || qName.equalsIgnoreCase("propertiesClass")) {                state = State.PROPERTIESCLASS;            } else if (localName.equalsIgnoreCase("valueClass") || qName.equalsIgnoreCase("valueClass")) {                state = State.VALUESCLASS;            } else if (localName.equalsIgnoreCase("type") || qName.equalsIgnoreCase("type")) {                state = State.TYPE;            } else if (localName.equalsIgnoreCase("value") || qName.equalsIgnoreCase("value")) {                state = State.VALUE;            } else if (localName.equalsIgnoreCase("userlink") || qName.equalsIgnoreCase("userlink")) {                state = State.USERLINK;            } else if (localName.equalsIgnoreCase("uclass") || qName.equalsIgnoreCase("uclass")) {                state = State.UCLASS;            } else if (localName.equalsIgnoreCase("ustrength") || qName.equalsIgnoreCase("ustrength")) {                state = State.USTRENGTH;            } else if (localName.equalsIgnoreCase("usourcetype") || qName.equalsIgnoreCase("usourcetype")) {                state = State.USOURCETYPE;            } else if (localName.equalsIgnoreCase("usourceid") || qName.equalsIgnoreCase("usourceid")) {                state = State.USOURCEID;            } else if (localName.equalsIgnoreCase("udestinationtype") || qName.equalsIgnoreCase("udestinationtype")) {                state = State.UDESTINATIONTYPE;            } else if (localName.equalsIgnoreCase("udestinationid") || qName.equalsIgnoreCase("udestinationid")) {                state = State.UDESTINATIONID;            } else if (localName.equalsIgnoreCase("uProperties") || qName.equalsIgnoreCase("uProperties")) {                state = State.UPROPERTIES;            } else if (localName.equalsIgnoreCase("uPropertiesClass") || qName.equalsIgnoreCase("uPropertiesClass")) {                state = State.UPROPERTIESCLASS;            } else if (localName.equalsIgnoreCase("uValueClass") || qName.equalsIgnoreCase("uValueClass")) {                state = State.UPROPERTIESVALUECLASS;            } else if (localName.equalsIgnoreCase("uPropertiesType") || qName.equalsIgnoreCase("uPropertiesType")) {                state = State.UPROPERTIESTYPE;            } else if (localName.equalsIgnoreCase("uPropertiesValue") || qName.equalsIgnoreCase("uPropertiesValue")) {                state = State.UPROPERTIESVALUE;            } else if (localName.equalsIgnoreCase("page") || qName.equalsIgnoreCase("page")) {                state = State.PAGE;            } else if (localName.equalsIgnoreCase("pathset") || qName.equalsIgnoreCase("pathset")) {                state = State.PAGE;            } else if (localName.equalsIgnoreCase("path") || qName.equalsIgnoreCase("path")) {                state = State.PAGE;            } else if (localName.equalsIgnoreCase("actor") || qName.equalsIgnoreCase("actor")) {                state = State.PAGE;            } else {                Logger.getLogger(GraphReader.class.getName()).log(Level.SEVERE, "Unknown Start Tag '" + qName + "'  at line " + locator.getLineNumber());            }        } catch (NullPointerException ex) {            Logger.getLogger(GraphReader.class.getName()).log(Level.SEVERE, "Null Pointer at line " + locator.getLineNumber());        }    }    @Override    public void startDocument() throws SAXException {        state = State.START;        nestedGraphs = new Stack<Graph>();        masterGraph = graph;    }    @Override    public ParsedObject get() {        return graph;    }    @Override    public void endElement(String uri, String localName, String qName) throws SAXException {//		System.out.println("End: "+uri + " - " + localName + " - " + qName);        try {            if (localName.equalsIgnoreCase("dataObject") || qName.equalsIgnoreCase("dataObject")) {                state = State.START;            } else if (localName.equalsIgnoreCase("graph") || qName.equalsIgnoreCase("graph")) {                if (nestedGraphs.size() > 0) {                    Graph tempGraph = nestedGraphs.pop();                    tempGraph.addChild(graph);                    graph = tempGraph;                    state = State.INNER_GRAPH;                } else {                    state = State.START;                }            } else if (localName.equalsIgnoreCase("graphClass") || qName.equalsIgnoreCase("graphClass")) {                propType = characters.toString();                if (nestedGraphs.size() == 0) {                    state = State.GRAPH;                } else {                    state = State.INNER_GRAPH;                }            } else if (localName.equalsIgnoreCase("graphName") || qName.equalsIgnoreCase("graphName")) {                graph.setID(characters.toString());                if (nestedGraphs.size() == 0) {                    state = State.GRAPH;                } else {                    state = State.INNER_GRAPH;                }            } else if (localName.equalsIgnoreCase("gProperties") || qName.equalsIgnoreCase("gProperties")) {                if (nestedGraphs.size() == 0) {                    state = State.GRAPH;                } else {                    state = State.INNER_GRAPH;                }                graph.add(prop);            } else if (localName.equalsIgnoreCase("gClass") || qName.equalsIgnoreCase("gClass")) {                state = State.GPROPERTIES;            } else if (localName.equalsIgnoreCase("gType") || qName.equalsIgnoreCase("gType")) {                java.util.Properties props = new java.util.Properties();                props.setProperty("PropertyType", propType);                props.setProperty("PropertyClass", valuesClass);                props.setProperty("PropertyID", characters.toString());                prop = PropertyFactory.newInstance().create(props);                state = State.GPROPERTIES;            } else if (localName.equalsIgnoreCase("gValueClass") || qName.equalsIgnoreCase("gValueClass")) {                valuesClass = characters.toString();                state = State.GPROPERTIES;            } else if (localName.equalsIgnoreCase("gValue") || qName.equalsIgnoreCase("gValue")) {                Object value = "";                try {                    value = PropertyTypeRegister.newInstance().getFactory(prop.getPropertyClass()).importFromString(characters.toString(), graph);                    prop.add(value);                } catch (InvalidObjectTypeException ex) {                    Logger.getLogger(GraphReader.class.getName()).log(Level.SEVERE, "Expected object of type " + prop.getPropertyClass().getName() + " but got " + value.getClass().getName() + " at line " + locator.getLineNumber());                }                state = State.GPROPERTIES;            } else if (localName.equalsIgnoreCase("user") || qName.equalsIgnoreCase("user")) {                if (nestedGraphs.size() == 0) {                    state = State.GRAPH;                } else {                    state = State.INNER_GRAPH;                }                graph.add(u);            } else if (localName.equalsIgnoreCase("userClass") || qName.equalsIgnoreCase("userClass")) {                userType = characters.toString();                state = State.USER;            } else if (localName.equalsIgnoreCase("id") || qName.equalsIgnoreCase("id")) {                u = masterGraph.getActor(userType, characters.toString());                if (u == null) {                    java.util.Properties props = new java.util.Properties();                    props.setProperty("ActorType", userType);                    props.setProperty("ActorID", characters.toString());                    u = ActorFactory.newInstance().create(props);                    actorCount++;                }                if(actorCount % 10000 == 0){                    Logger.getLogger(GraphReader.class.getName()).log(Level.INFO,"Actor Count: "+actorCount);                }                state = State.USER;            } else if (localName.equalsIgnoreCase("properties") || qName.equalsIgnoreCase("properties")) {                state = State.USER;                u.add(prop);            } else if (localName.equalsIgnoreCase("propertiesClass") || qName.equalsIgnoreCase("propertiesClass")) {                propType = characters.toString();                state = State.PROPERTIES;            } else if (localName.equalsIgnoreCase("valueClass") || qName.equalsIgnoreCase("valueClass")) {                valuesClass = characters.toString();                state = State.PROPERTIES;            } else if (localName.equalsIgnoreCase("type") || qName.equalsIgnoreCase("type")) {                java.util.Properties props = new java.util.Properties();                props.setProperty("PropertyType", propType);                props.setProperty("PropertyClass", valuesClass);                props.setProperty("PropertyID", characters.toString());                prop = PropertyFactory.newInstance().create(props);                state = State.PROPERTIES;            } else if (localName.equalsIgnoreCase("value") || qName.equalsIgnoreCase("value")) {                Object value = "";                try {                    value = PropertyTypeRegister.newInstance().getFactory(prop.getPropertyClass()).importFromString(characters.toString(), graph);                    prop.add(value);                } catch (InvalidObjectTypeException ex) {                    Logger.getLogger(GraphReader.class.getName()).log(Level.SEVERE, "Expected object of type " + prop.getPropertyClass().getName() + " but got " + value.getClass().getName() + " at line " + locator.getLineNumber());                }                state = State.PROPERTIES;            } else if (localName.equalsIgnoreCase("userlink") || qName.equalsIgnoreCase("userlink")) {                try {                    if ((sourceActor != null) && (destActor != null)) {                        Link[] linkArray = masterGraph.getLink(linkType, sourceActor, destActor);                        if (linkArray == null) {                            java.util.Properties props = new java.util.Properties();                            props.setProperty("LinkType", linkType);                            props.setProperty("LinkClass", "Basic");                            ul = LinkFactory.newInstance().create(props);                            ul.set(sourceActor, strength, destActor);                            linkCount++;                        } else {                            ul = linkArray[0];                        }                        graph.add(ul);                        if(linkCount % 100000 == 0){                           Logger.getLogger(GraphReader.class.getName()).log(Level.INFO,"Link Count "+linkCount);                         }                    }                } catch (NullPointerException e) {                    Logger.getLogger(GraphReader.class.getName()).log(Level.SEVERE, "Null Pointer at line " + locator.getLineNumber());                }                if (nestedGraphs.size() == 0) {                    state = State.GRAPH;                } else {                    state = State.INNER_GRAPH;                }            } else if (localName.equalsIgnoreCase("uclass") || qName.equalsIgnoreCase("uclass")) {                linkType = characters.toString();                state = State.USERLINK;            } else if (localName.equalsIgnoreCase("ustrength") || qName.equalsIgnoreCase("ustrength")) {                try {                    strength = Double.parseDouble(characters.toString());                } catch (NumberFormatException ex) {                    Logger.getLogger(GraphReader.class.getName()).log(Level.SEVERE, "Bad Number - " + characters.toString() + " at line " + locator.getLineNumber());                    ex.printStackTrace();                    strength = 0.0;                }                state = State.USERLINK;            } else if (localName.equalsIgnoreCase("usourcetype") || qName.equalsIgnoreCase("usourcetype")) {                userType = characters.toString();                state = State.USERLINK;            } else if (localName.equalsIgnoreCase("usourceid") || qName.equalsIgnoreCase("usourceid")) {                sourceActor = masterGraph.getActor(userType, characters.toString());                if (sourceActor == null) {                    Logger.getLogger(GraphReader.class.getName()).log(Level.SEVERE, "Actor Type:'" + userType + "' ID:'" + characters.toString() + "' does not exist at line " + locator.getLineNumber());                }                state = State.USERLINK;            } else if (localName.equalsIgnoreCase("udestinationtype") || qName.equalsIgnoreCase("udestinationtype")) {                artistType = characters.toString();                state = State.USERLINK;            } else if (localName.equalsIgnoreCase("udestinationid") || qName.equalsIgnoreCase("udestinationid")) {                destActor = masterGraph.getActor(artistType, characters.toString());                if (destActor == null) {                    Logger.getLogger(GraphReader.class.getName()).log(Level.SEVERE, "Actor Type:'" + artistType + "' ID:'" + characters.toString() + "' does not exist at line " + locator.getLineNumber());                }                state = State.USERLINK;            } else if (localName.equalsIgnoreCase("uProperties") || qName.equalsIgnoreCase("uProperties")) {                state = State.USERLINK;            } else if (localName.equalsIgnoreCase("uPropertiesClass") || qName.equalsIgnoreCase("uPropertiesClass")) {                state = State.UPROPERTIES;            } else if (localName.equalsIgnoreCase("uValueClass") || qName.equalsIgnoreCase("uValueClass")) {                state = State.UPROPERTIES;            } else if (localName.equalsIgnoreCase("uPropertiesType") || qName.equalsIgnoreCase("uPropertiesType")) {                propType = characters.toString();                state = State.UPROPERTIES;            } else if (localName.equalsIgnoreCase("uPropertiesValue") || qName.equalsIgnoreCase("uPropertiesValue")) {                Object value = "";                try {                    value = PropertyTypeRegister.newInstance().getFactory(prop.getPropertyClass()).importFromString(characters.toString(), graph);                    prop.add(value);                } catch (InvalidObjectTypeException ex) {                    Logger.getLogger(GraphReader.class.getName()).log(Level.SEVERE, "Expected object of type " + prop.getPropertyClass().getName() + " but got " + value.getClass().getName() + " at line " + locator.getLineNumber());                }                state = State.UPROPERTIES;            } else if (localName.equalsIgnoreCase("page") || qName.equalsIgnoreCase("page")) {                java.util.Properties props = new java.util.Properties();                props.setProperty("PageType", "Basic");                props.setProperty("PageID", characters.toString());                u.add(PageFactory.newInstance().create(props));                state = State.USER;            } else {                Logger.getLogger(GraphReader.class.getName()).log(Level.SEVERE, "Unknown End Tag '" + qName + "' at line " + locator.getLineNumber());            }        } catch (NullPointerException ex) {            Logger.getLogger(GraphReader.class.getName()).log(Level.SEVERE, "Null Pointer at line " + locator.getLineNumber());        }    }    @Override    public void endDocument() throws SAXException {    }    @Override    public void characters(char[] ch, int start, int length) throws SAXException {        characters.append(ch, start, length);    }    /**     * Set the graph from which to load the data from the parsed object     * @param type graph to be loaded by this parser     */    public void setGraph(Graph type) {        graph = type;    }    @Override    public Handler duplicate() {        return new GraphReader();    }    @Override    public void set(ParsedObject o) {        if (o instanceof Graph) {            graph = (Graph) o;        }    }    @Override    public void setDocumentLocator(Locator locator) {        this.locator = locator;    }}