/** * copyright Daniel McEnnis - published under Aferro GPL (see license.txt) */package nz.ac.waikato.mcennis.rat.parser;import java.util.Properties;import nz.ac.waikato.mcennis.rat.parser.xmlHandler.HandlerFactory;import nz.ac.waikato.mcennis.rat.graph.artist.decider.ArtistDeciderFactory;        /** * Class for creating Parsers * @author Daniel McEnnis *  */public class ParserFactory {        private static ParserFactory instance = null;        /**     * Create a new reference to the ParserFactory singelton     * @return new reference     */    static public ParserFactory newInstance(){        if(instance == null){            instance = new ParserFactory();        }        return instance;    }        protected ParserFactory(){}        /**     * Create Parsers using the given properties file as parameters     *      * Parser Class is determined by the 'ParserType' key     *      * <ul>     * <li>HTML</li>     * <li>File<ul><li>'ToFileDirectory' - directory where files should be stored</li></ul></li>     * <li>Scheduler - see HandlerFactory-RATExecution for more parameters</li>     * <li>FOAF - see HandlerFactory-FOAF for more parameters</li>     * <li>Graph - see HandlerFactory-Graph for more parameters</li>     * <li>GoogleArtist</li>     * <li>LastFmArtist <ul>     *  <li>'LastFMType' - LastFM xml parser if XML, Basic bio parser otherwise</li>     * </ul></li>     * <li>BaseArtistDecider - ArtistDecider created - see ArtistDeciderFactory</li>     * <li>ArtistDeciderXML</li>     * <li>YahooArtistDecider</li>     * <li>LastFMArtistTag - see HandlerFactory-LastFMArtistTag for parameters</li>     * </ul>     * @param props     * @return     */    public Parser create(Properties props){//		if(name.contentEquals("Jena")){//			if((arg !=null)&&(arg.compareTo("")!=0)){//				if(arg.contentEquals("Memory")){//					return null;//new JenaModelParser(com.hp.hpl.jena.rdf.model.ModelFactory.createDefaultModel());//				}//				//else if(arg.compareTo("Database")){//				//	com.hp.hpl.jena.rdf.model.//				//}//				else{//					return new JenaModelParser();//				}//			}else{//				return new JenaModelParser();//			}//		}else        if(props == null){            return new BaseHTMLParser();        }else if("HTML".contentEquals(props.getProperty("ParserType"))){            return new BaseHTMLParser();        }else if("File".contentEquals(props.getProperty("ParserType"))){            if(props.getProperty("ToFileDirectory")!=null){                return new ToFileParser(props.getProperty("ToFileDirectory"));            }else{                return new ToFileParser();            }        }else if ("YahooArtistDecider".contentEquals(props.getProperty("ParserType"))){            XMLParser ret = new XMLParser();            props.setProperty("HandlerType","YahooArtistDecider");            ret.setHandler(HandlerFactory.newInstance().create(props));            return ret;        }else if ("Scheduler".contentEquals(props.getProperty("ParserType"))){            XMLParser ret = new XMLParser();            props.setProperty("HandlerType","RATExecution");            ret.setHandler(HandlerFactory.newInstance().create(props));            return ret;        }else if ("FOAF".contentEquals(props.getProperty("ParserType"))){            XMLParser ret = new XMLParser();            props.setProperty("HandlerType","FOAF");            ret.setHandler(HandlerFactory.newInstance().create(props));            return ret;        }else if ("LastFMArtistTag".contentEquals(props.getProperty("ParserType"))){            XMLParser ret = new XMLParser();            props.setProperty("HandlerType","LastFMArtistTag");            ret.setHandler(HandlerFactory.newInstance().create(props));            return ret;        }else if("Graph".contentEquals(props.getProperty("ParserType"))){            XMLParser ret = new XMLParser();            props.setProperty("HandlerType","Graph");            ret.setHandler(HandlerFactory.newInstance().create(props));            return ret;//            if("Null".contentEquals(props.getProperty("GraphType"))){//                ret.setHandler(HandlerFactory.newInstance().create("Null",null));//                return ret;//            }else if((arg != null)&&(arg.contentEquals("UserList"))){//                ret.setHandler(HandlerFactory.newInstance().create("UserList",null));//                return ret;//            }else if((arg != null)&(arg.contentEquals("Derby"))){//                ret.setHandler(HandlerFactory.newInstance().create("Derby",null));//                return ret;//            }else if((arg != null)&(arg.contentEquals("Postgresql"))){//                ret.setHandler(HandlerFactory.newInstance().create("Postgresql",null));//                return ret;//            }else{//                ret.setHandler(HandlerFactory.newInstance().create("MemGraph",null));//                return ret;//            }        }else if("GoogleArtist".contentEquals(props.getProperty("ParserType"))){            return new GoogleArtistParser();        }else if("LastFmArtist".contentEquals(props.getProperty("ParserType"))){            if("XML".equalsIgnoreCase(props.getProperty("LastFMType"))){                XMLParser ret = new XMLParser();                ret.setHandler(HandlerFactory.newInstance().create(props));                return ret;            }else{                return new LastFmBasicArtistParser();            }        }else if("BaseArtistDecider".contentEquals(props.getProperty("ParserType"))){            ParseArtistList parser = new ParseArtistList();            parser.setDecider(ArtistDeciderFactory.newInstance().create(props));            return parser;        }else if("ArtistDeciderXML".equals(props.getProperty("ParserType"))){            XMLParser ret = new XMLParser();            ret.setHandler(HandlerFactory.newInstance().create(props));            return ret;        }else if("BibliographyXML".equals(props.getProperty("ParserType"))){            XMLParser ret = new XMLParser();            props.setProperty("HandlerType","BibliographyXML");            ret.setHandler(HandlerFactory.newInstance().create(props));            return ret;        }else if("ParseClassLabel".equals(props.getProperty("ParserType"))){            XMLParser ret = new XMLParser();            props.setProperty("HandlerType","ParseClassLabel");            ret.setHandler(HandlerFactory.newInstance().create(props));            return ret;        }else{            return new BaseHTMLParser();        }    }}