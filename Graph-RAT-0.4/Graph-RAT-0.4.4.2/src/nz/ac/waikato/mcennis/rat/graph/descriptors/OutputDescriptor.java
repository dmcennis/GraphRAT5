/* * DataDescriptor.java * * Created on 14 September 2007, 12:41 * * Copyright Daniel McEnnis, published under Aferro GPL (see license.txt) */package nz.ac.waikato.mcennis.rat.graph.descriptors;/** * Class describing the output types generated by this object.  This object * remains valid iff not status paramteres are altered.  It is the responsibility * of the application (or algorithm manager) to ensure that these conditions are * met. * * @author Daniel McEnnis */public interface OutputDescriptor {        /**     * Set of all enumerations representing each type of output that an algorithm     * can produce.     * <ul>     * <li>ACTOR - Creates or destroys actors     * <li>ACTOR_PROPERTY - Adds properties to an actor     * <li>GRAPH - Creates or destroys graphs.     * <li>GRAPH_PROPERTY - Adds properties to a graph.     * <li>LINK - Creates or destroys links.     * <li>PATHSET - Creates or destroys sets of paths.     * </ul>     */    public enum Type {ACTOR,ACTOR_PROPERTY,GRAPH,GRAPH_PROPERTY,LINK,LINK_PROPERTY,PATHSET};        /**     * Acquire the name of the algorithm that generated this data descriptor.       * Names are unique within a single application, but multiple instances of      * the same class with differing names are permitted. No set operation defined      * as it is an immutable object created by the parent algorithm.     *     * @return Algorithm name     */    public String getAlgorithmName();        /**     * Return the actor types and link types that this algorithm utilizes during     * input.  This is not necessarily immutable and is no longer valid after any     * parameter changes.     *     * @return      */    public String getRelation();        /**     * what type of object - Graph, Link, or Actor - does this object describe.      *     * @return is the actor type a graph or not     */    public Type getClassType();        /**     * Name of the property of the object that is created.  Links      * objects return null since they can not hold properties.     *     * @return name of the property that this algorithm works on.     */    public String getProperty();    }