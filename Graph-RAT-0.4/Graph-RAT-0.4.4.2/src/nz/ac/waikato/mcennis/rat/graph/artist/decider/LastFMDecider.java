/* * LastFMBasicDescider.java * * Created on 11 June 2007, 15:47 * *  Copyright Daniel McEnnis, published under Aferro GPL (see license.txt) */package nz.ac.waikato.mcennis.rat.graph.artist.decider;import java.io.IOException;import java.net.MalformedURLException;import nz.ac.waikato.mcennis.rat.crawler.CrawlerBase;import nz.ac.waikato.mcennis.rat.parser.Parser;import nz.ac.waikato.mcennis.rat.parser.ParserFactory;import nz.ac.waikato.mcennis.rat.parser.XMLParser;import nz.ac.waikato.mcennis.rat.parser.xmlHandler.LastFmArtistHandler;/** * * Class for using LastFM related-artist REST service for determining whether or * not an string is an artist or not. * @author Daniel McEnnis *  */public class LastFMDecider extends ArtistDeciderBase{        CrawlerBase crawler;        String type = null;        private static LastFMDecider instance = null;            /**     * acquire a reference to this singleton object     * @return reference to the LastFMDecider object     */    public static LastFMDecider newInstance(){        if(instance == null){            instance = new LastFMDecider();        }        return instance;    }        private LastFMDecider(){        super();        crawler = new CrawlerBase();    }    //    /** Creates a new instance of LastFMBasicDescider *///    private LastFMDecider(int threads) {//        super();//        crawler = new WebCrawler();//        crawler.createThreads(threads);//    }        /**     * Sets parser type to either to be the XML parser (parsing related artists)     * or parsing the artist bio page (parsing HTML).     * @param type name of potential artist     */    public void setParser(String type){        Parser[] p = new Parser[1];        if(type.equalsIgnoreCase("XML")){            this.type = type;            java.util.Properties props = new java.util.Properties();            props.setProperty("ParserType","LastFm");            props.setProperty("LastFMType","XML");            p[0] = ParserFactory.newInstance().create(props);                    }else{            this.type = type;            java.util.Properties props = new java.util.Properties();            props.setProperty("ParserType","LastFm");            props.setProperty("LastFMType","Basic");            p[0] = ParserFactory.newInstance().create(props);        }        crawler.set(p);    }        /**     * Lookup the artist on LastFM using the web crawler and pre-determined parser.     * @param name string to be looked up.     */    public void lookup(String name){        try {            String adjustedName = java.net.URLEncoder.encode(name,"UTF-8");            crawler.crawl("http://ws.audioscrobbler.com/1.0/artist/"+adjustedName+"/similar.xml");            if(crawler.getParser()[0].get() != null){                 artist.add(name);                 if(type.equalsIgnoreCase("XML")){                     artist.addAll(((LastFmArtistHandler)(((XMLParser)crawler.getParser()[0]).getHandler())).artistList);                     checked.addAll(((LastFmArtistHandler)(((XMLParser)crawler.getParser()[0]).getHandler())).artistList);                 }             }            checked.add(name);        } catch (MalformedURLException ex) {            ex.printStackTrace();        } catch(java.io.FileNotFoundException ex){            checked.add(name);        } catch (IOException ex) {            ex.printStackTrace();        }    }        /**     * Should a proxy be used     * @param p true/false on proxy.     */    public void setProxy(boolean p){            crawler.setProxy(p);    }}