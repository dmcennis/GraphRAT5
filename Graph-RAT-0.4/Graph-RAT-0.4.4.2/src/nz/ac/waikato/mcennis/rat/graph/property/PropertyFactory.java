/* * PropertyFactory.java * * Created on 1 May 2007, 17:03 * * copyright Daniel McEnnis - published under Aferro GPL (see license.txt) */package org.dynamicfactory.property;import java.util.Properties;/** * *  * Class for creating Property objects * @author Daniel McEnnis */public class PropertyFactory {        static PropertyFactory instance = null;        /**     * Create a reference to the singelton PropertyFactory     *      * @return reference to the PropertyFactory     */    public static PropertyFactory newInstance(){        if(instance == null){            instance = new PropertyFactory();        }        return instance;    }        /** Creates a new instance of PropertyFactory */    public PropertyFactory() {            }        /**     * Creates a new Property Object. 'PropertyID' is used to set     * the id of the resulting property.  'PropertyClass' is used to set what     * class of objects can be added as values. A new BasicProperty object with the     * given id and given values class is returned.     *      * @param props map of initialization properties     * @return new Property object     */    public Property create(Properties props) {        if(props != null){            if(!props.containsKey("PropertyID")){                return null;            }            if(props.containsKey("PropertyClass")){                try {                    Class propertyClass = Class.forName(props.getProperty("PropertyClass"));                    return new BasicProperty(props.getProperty("PropertyID"), propertyClass);                } catch (ClassNotFoundException classNotFoundException) {                    System.err.println("Class '"+props.getProperty("PropertyClass")+"' not found");                    return null;                }            }else{                return new BasicProperty(props.getProperty("PropertyID"),java.lang.String.class);            }        }else{            return null;        }    }            }