/* * ArtistDeciderFactory.java * * Created on 11 June 2007, 15:56 * * Copyright Daniel McEnnis, published under Aferro GPL (see license.txt) */package nz.ac.waikato.mcennis.rat.graph.artist.decider;import java.io.FileNotFoundException;import java.io.IOException;import java.util.Properties;/** * Class for creating an ArtistDecider * * @author Daniel McEnnis *  */public class ArtistDeciderFactory {            private static ArtistDeciderFactory instance = null;        /**     * returns the singleton ArtistDeciderFactory     * @return singelton instance of this class     */    public static ArtistDeciderFactory newInstance(){        if(instance == null){            instance = new ArtistDeciderFactory();        }        return instance;    }        /** Creates a new instance of ArtistDeciderFactory */    private ArtistDeciderFactory() {    }        /**     * Create an ArtistDecider     * The type is chosen by the 'ArtistDeciderType' parameter     * Known Types:     * <ul>     * <li>'Google' - GoogleDecider</li>     * <li>'LastFM' - LastFMDecider <ul>     *  <li>'LastFMType' key = 'XML' for XML version</li>     *  <li>'LastFMType' key undefined or anything else 'Basic'</li>     *  </ul>     * </li>     * <li>Anything else - BasicArtistDecider <ul>     *  <li>'artistListLocation' key = directory of list of all artists</li></ul>     * </li>     * </ul>     * @param props parameters to initialize the ArtistDecider     * @return newly created ArtistDecider     */    public ArtistDecider create(Properties props){        if(props==null){            return new BasicArtistDecider();        }else if ("Google".equalsIgnoreCase(props.getProperty("ArtistDeciderType"))){            return GoogleDecider.newInstance();        }else if("LastFM".equalsIgnoreCase(props.getProperty("ArtistDeciderType"))){            LastFMDecider ret = LastFMDecider.newInstance();            if(("XML".equalsIgnoreCase(props.getProperty("LastFMType")))){                ret.setParser("XML");            }else{                ret.setParser("Basic");            }            return ret;        }else{            ArtistDecider decider = new BasicArtistDecider();            if(props.getProperty("artistListLocation")!= null){                java.io.File artist = new java.io.File(props.getProperty("artistListLocation"));                try {                    java.io.LineNumberReader reader = new java.io.LineNumberReader(new java.io.FileReader(artist));                    String a = reader.readLine();                    while((a != null)&&(!a.contentEquals(""))){                        if(reader.getLineNumber()%10000==0){                            System.out.println("Loading artist "+reader.getLineNumber()+" '"+a+"'");                        }                        decider.addArtist(a.toLowerCase());                        a = reader.readLine();                    }                } catch (FileNotFoundException ex) {                    ex.printStackTrace();                } catch (IOException ex) {                    ex.printStackTrace();                }            }else{                System.err.println("No directory specified - aborting load");            }            return decider;        }    }    }